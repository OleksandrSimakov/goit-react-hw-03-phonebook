{"version":3,"sources":["Components/ContactAddForm/ContactAddForm.styled.jsx","Components/ContactAddForm/ContactAddForm.jsx","Components/ContactListItem/ContactListItem.styled.jsx","Components/ContactListItem/ContactListItem.jsx","Components/ContactList/ContactList.styled.jsx","Components/ContactList/ContactList.jsx","Components/Filter/Filter.styled.jsx","Components/Filter/Filter.jsx","Components/App.jsx","index.js"],"names":["ContactAddFormEl","styled","form","styles","input","display","marginBottom","marginTop","label","button","width","fontSize","backgroundColor","borderRadius","border","cursor","ContactAddForm","state","name","number","handleSubmit","e","preventDefault","props","onSubmit","setState","handleChange","target","value","this","style","type","pattern","title","required","onChange","Component","ContactListItemEl","li","marginLeft","ContactListItem","onDelBtnClick","onClick","defaultProps","ContactListEl","ul","ContactList","children","FilterEl","div","Filter","filter","handleFilterChange","App","contacts","addContact","find","contact","alert","prevState","id","uuidv4","filterInput","getFilteredNames","normilizedFilterState","toLowerCase","includes","deleteContact","contactId","localStorage","getItem","parsedContacts","JSON","parse","_","nextContacts","setItem","stringify","filteredContactNames","map","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.622d7e95.chunk.js","sourcesContent":["import styled from '@emotion/styled'\n\nconst ContactAddFormEl = styled.form`\n  display: flex;\n  flex-direction: column;\n  border: 2px solid black;\n  width: 400px;\n  padding: 20px;\n  margin-bottom: 20px;\n`\nexport default ContactAddFormEl\n","import React, { Component } from 'react'\nimport ContactAddFormEl from './ContactAddForm.styled'\nimport PropTypes from 'prop-types'\n\nconst styles = {\n  input: {\n    display: 'block',\n    marginBottom: '10px',\n    marginTop: '5px',\n  },\n  label: {\n    marginBottom: '10px',\n  },\n  button: {\n    width: '100px',\n    fontSize: '12px',\n    backgroundColor: 'white',\n    borderRadius: '5px',\n    border: '1px solid gray',\n    cursor: 'pointer',\n  },\n}\n\nexport default class ContactAddForm extends Component {\n  static propTypes = {\n    onSubmit: PropTypes.func.isRequired,\n  }\n\n  state = {\n    name: '',\n    number: '',\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault()\n    this.props.onSubmit(this.state)\n    this.setState({\n      name: '',\n      number: '',\n    })\n  }\n\n  handleChange = (e) => {\n    const { name, value } = e.target\n    this.setState({\n      [name]: value,\n    })\n  }\n\n  render() {\n    const { name, number } = this.state\n    return (\n      <ContactAddFormEl onSubmit={this.handleSubmit}>\n        <label style={styles.label}>\n          Name\n          <input\n            style={styles.input}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            value={name}\n            onChange={this.handleChange}\n          />\n        </label>\n        <label style={styles.label}>\n          Number\n          <input\n            style={styles.input}\n            type=\"tel\"\n            name=\"number\"\n            required\n            value={number}\n            onChange={this.handleChange}\n          ></input>\n        </label>\n        <button type=\"submit\" style={styles.button}>\n          Add Contact\n        </button>\n      </ContactAddFormEl>\n    )\n  }\n}\n","import styled from '@emotion/styled'\n\nconst ContactListItemEl = styled.li`\n  display: flex;\n  justify-content: space-between;\n  padding: 5px;\n`\n\nexport default ContactListItemEl\n","import ContactListItemEl from '../ContactListItem/ContactListItem.styled'\nimport PropTypes from 'prop-types'\n\nconst styles = {\n  button: {\n    width: '50px',\n    fontSize: '12px',\n    backgroundColor: 'white',\n    borderRadius: '5px',\n    border: '1px solid gray',\n    cursor: 'pointer',\n    marginLeft: '30px',\n  },\n}\n\nfunction ContactListItem({ name, number, onDelBtnClick }) {\n  return (\n    <ContactListItemEl>\n      {name}: {number}\n      <button\n        type=\"submit\"\n        name={name}\n        onClick={onDelBtnClick}\n        style={styles.button}\n      >\n        Delete\n      </button>\n    </ContactListItemEl>\n  )\n}\n\nContactListItem.propTypes = {\n  onDelBtnClick: PropTypes.func,\n  name: PropTypes.string,\n  number: PropTypes.string,\n}\n\nContactListItem.defaultProps = {\n  name: null,\n  number: null,\n  onDelBtnClick: () => null,\n}\n\nexport default ContactListItem\n","import styled from '@emotion/styled'\n\nconst ContactListEl = styled.ul`\n  padding: 0;\n  list-style: none;\n  width: 400px;\n  margin: 0px;\n`\n\nexport default ContactListEl\n","import ContactListEl from './ContactList.styled'\nimport PropTypes from 'prop-types'\n\nfunction ContactList({ children }) {\n  return <ContactListEl>{children}</ContactListEl>\n}\n\nContactList.propTypes = {\n  children: PropTypes.arrayOf(PropTypes.element),\n}\n\nexport default ContactList\n","import styled from '@emotion/styled'\n\nconst FilterEl = styled.div`\n  margin-bottom: 20px;\n`\n\nexport default FilterEl\n","import FilterEl from './Filter.styled'\nimport PropTypes from 'prop-types'\n\nconst styles = {\n  input: {\n    display: 'block',\n    marginTop: '5px',\n  },\n}\n\nfunction Filter({ filter, handleFilterChange }) {\n  return (\n    <FilterEl>\n      <label>\n        Find contacts by name\n        <input\n          style={styles.input}\n          type=\"text\"\n          name=\"filter\"\n          value={filter}\n          onChange={handleFilterChange}\n        ></input>\n      </label>\n    </FilterEl>\n  )\n}\n\nFilter.propTypes = {\n  filter: PropTypes.string,\n  handleFilterChange: PropTypes.func,\n}\n\nFilter.defaultProps = {\n  filter: null,\n  handleFilterChange: null,\n}\n\nexport default Filter\n","import { Component } from 'react'\nimport ContactAddForm from './ContactAddForm/ContactAddForm'\nimport ContactListItem from './ContactListItem/ContactListItem'\nimport ContactList from './ContactList/ContactList'\nimport Filter from './Filter/Filter'\nimport { v4 as uuidv4 } from 'uuid'\n\nexport default class App extends Component {\n  state = {\n    contacts: [],\n    filter: '',\n  }\n\n  componentDidMount() {\n    const contacts = localStorage.getItem('contacts')\n    const parsedContacts = JSON.parse(contacts)\n\n    if (parsedContacts) {\n      this.setState({ contacts: parsedContacts })\n    }\n  }\n\n  componentDidUpdate(_, prevState) {\n    const nextContacts = this.state.contacts\n    const prevContacts = prevState.contacts\n\n    if (nextContacts !== prevContacts) {\n      localStorage.setItem('contacts', JSON.stringify(nextContacts))\n    }\n  }\n\n  addContact = ({ name, number }) => {\n    const contactsHaveDuplicate = this.state.contacts.find(\n      (contact) => contact.name === name,\n    )\n    contactsHaveDuplicate\n      ? alert(`${name} is already in contacts`)\n      : this.setState((prevState) => ({\n          contacts: [\n            ...prevState.contacts,\n            { id: uuidv4(), name: name, number: number },\n          ],\n        }))\n  }\n\n  handleFilterChange = ({ target }) => {\n    const filterInput = target.value\n    this.setState({\n      filter: filterInput,\n    })\n  }\n\n  getFilteredNames = () => {\n    const { filter, contacts } = this.state\n    const normilizedFilterState = filter.toLowerCase()\n\n    return contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(normilizedFilterState),\n    )\n  }\n\n  deleteContact = (contactId) => {\n    this.setState((prevState) => ({\n      contacts: prevState.contacts.filter(\n        (contact) => contact.id !== contactId,\n      ),\n    }))\n  }\n\n  render() {\n    const { filter } = this.state\n\n    const filteredContactNames = this.getFilteredNames()\n\n    return (\n      <>\n        <h2>Phonebook</h2>\n\n        <ContactAddForm onSubmit={this.addContact} />\n\n        <h2>Contacts</h2>\n\n        <Filter\n          filter={filter}\n          handleFilterChange={this.handleFilterChange}\n        ></Filter>\n\n        <ContactList>\n          {filteredContactNames.map(({ id, name, number }) => (\n            <ContactListItem\n              key={id}\n              name={name}\n              number={number}\n              onDelBtnClick={() => this.deleteContact(id)}\n            />\n          ))}\n        </ContactList>\n      </>\n    )\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './Components/App'\nimport 'modern-normalize/modern-normalize.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}